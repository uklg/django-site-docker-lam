#!/bin/bash

projectname=models
accessport=8003



if [[ -z $1 ]];
then
  echo No parameter doing prod build
  export DEBUG=0
  export VOLUME=/app
else
  if [[ $1 == "debug" ]]
    then

    echo param doing responsive debug build
    export DEBUG=1
    export VOLUME=/code
  fi
  if [[ $1 == "rebuild" ]]
    then
    echo "This will allow dynamic reloading of code changes (in debug mode only and /code volume must be attached to project root) and db rebuilds"
    docker exec ${projectname}-web env|grep DEBUG
    docker inspect  ${projectname}-web|grep -i '"Volumes"' -A1
    docker exec ${projectname}-web /code/manage.py makemigrations
    docker exec ${projectname}-web /code/manage.py migrate

    exit
  fi
fi



echo $(env|grep DEBUG)
echo $(env|grep VOLUME)


#sleep 3
#exit




projectname=models
accessport=8003

export COMPOSE_PROJECT_NAME=${projectname}


# could use docker instead of this bit of house keeping
docker stop ${projectname}-web 
docker rm ${projectname}-web


# The _ is autogenerated for the image so matching slightly differently
docker rmi $(docker images |grep "${projectname}_web"|cut -d ' ' -f1)

#exit



if [ ! -f /tmp/build-dsd-fw2 ]
then
    echo 'no firewall yet'
    sudo iptables -I INPUT 2 -i lo -p tcp --dport 8000:8999 -j ACCEPT
    touch /tmp/build-dsd-fw2

else
    echo 'firewall in place'


fi


#todo copy a secrets directory and fail if it does not exist (could be param with environment name, staging live etc)





# this is handled by the compose and was probably useful for populating db initially 
#docker build -t django-site-docker-models .
# echo takes a while to load up 5 seconds or such
#f irefox http://127.0.0.1:8002/


export COMPOSE_PROJECT_NAME=${projectname}

# uses Dockerfile in this dir to build image if it does not exist and with --build every time



# Build is not in use unless the container is deleted as no container means build anyway keep for cleaness:

docker compose up --build   -d 
docker-compose up --build -d





docker exec -it ${projectname}-web /code/start.sh

echo running test to see if string is present at the newly spun up site:
curl -L 127.0.0.1:${accessport} | grep "Professional wedding DJ" ;echo exit code: $(echo $?)

echo running test to see if string is present at the newly pun up Admin site:
curl -L 127.0.0.1:${accessport}/admin | grep "Django administration" ;echo exit code: $(echo $?)


echo 'css may take a while to start so wait 5 seconds'



firefox --private-window http://127.0.0.1:${accessport}/

echo admin may need their own browser space for cookies to work:

firefox --private-window http://127.0.0.1:${accessport}/admin/


docker logs -f ${projectname}-web 
